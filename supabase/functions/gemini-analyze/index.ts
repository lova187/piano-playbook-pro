import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent';

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { prompt, audioData, analysisType = 'general' } = await req.json();

    if (!prompt && !audioData) {
      throw new Error('Either prompt or audioData is required');
    }

    console.log('Gemini analysis request:', { analysisType, hasAudio: !!audioData, hasPrompt: !!prompt });

    // Prepare the request payload for Gemini
    const requestBody: any = {
      contents: [{
        parts: []
      }]
    };

    // Add text prompt if provided
    if (prompt) {
      requestBody.contents[0].parts.push({
        text: prompt
      });
    }

    // Add audio data if provided (base64 encoded)
    if (audioData) {
      requestBody.contents[0].parts.push({
        inline_data: {
          mime_type: "audio/wav",
          data: audioData
        }
      });

      // Add music analysis context based on analysis type
      const musicPrompts = {
        performance: "Analyze this piano performance. Identify: 1) Notes played and their accuracy 2) Timing and rhythm 3) Dynamics and expression 4) Areas for improvement 5) Overall score (1-10). Provide specific feedback for piano learning.",
        transcription: "Transcribe this piano audio into musical notation. Identify: 1) All notes played with timing 2) Key signature 3) Time signature 4) Chord progressions 5) Provide the transcription in a readable format.",
        practice: "Analyze this piano practice session. Evaluate: 1) Technical accuracy 2) Consistency of tempo 3) Finger technique (if detectable) 4) Suggestions for improvement 5) Practice recommendations.",
        general: "Analyze this piano audio and provide musical insights including notes, timing, and performance quality."
      };

      requestBody.contents[0].parts.push({
        text: musicPrompts[analysisType as keyof typeof musicPrompts] || musicPrompts.general
      });
    }

    // Make request to Gemini API
    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', response.status, errorText);
      throw new Error(`Gemini API error: ${response.status} ${errorText}`);
    }

    const result = await response.json();
    console.log('Gemini API response received');

    // Extract the generated content
    const generatedText = result.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!generatedText) {
      throw new Error('No content generated by Gemini');
    }

    return new Response(JSON.stringify({ 
      analysis: generatedText,
      analysisType,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in gemini-analyze function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});